import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset (replace 'news_data.csv' with your file path)
data = pd.read_csv('news_data.csv')

# Checking for missing values
data = data.dropna()

# Splitting the dataset into training and testing sets
X = data['text']  # Text column
y = data['label']  # Label column (fake or real)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature extraction using TF-IDF
tfidf_vectorizer = TfidfVectorizer(max_df=0.7, min_df=0.1, stop_words='english')
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Model training with Logistic Regression
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# Prediction and evaluation
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)

print(f"Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:\n", classification_report(y_test, y_pred))


I have created the complete source code for the fake news detection system using NLP.

Let me know if you want me to further improve it, add a user interface, or enhance its performance.
